{"version":3,"sources":["components/SectionTitle.jsx","components/SectionContainer.jsx","components/PageContainer.jsx","constants.js","components/TodoForm.jsx","hooks.js","pages/ChangeConfirmation.jsx","pages/TodoListing.jsx","config/themeing.js","reducers/todos.js","reducers/application.js","reducers/root.js","store.js","components/SimpleErrorBoundary.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["SectionTitle","styled","h3","SectionContainer","section","SectionContainerUsable","children","className","PageContainer","div","ADD_TODO","SET_EDITING","CONFIRM_EDIT","RESET_EDITING","ROUTE_CHANGE_CONFIRM","LIGHT","DARK","TOGGLE_MODE","statusOptions","reduce","options","current","key","text","TodoFormContainer","props","readOnly","TitleField","TextField","DescriptionField","DueDateField","DatePicker","StatusDropdown","Dropdown","FormButton","PrimaryButton","TodoForm","id","title","description","submitText","dueDate","status","isNew","onSubmission","isInitialMount","useRef","useState","titleR","setTitle","descriptionR","setDescription","dueDateR","setDueDate","statusR","setStatus","isValid","setIsValid","useSetter","setter","e","target","value","payloadData","useEffect","emptyExists","some","length","placeholder","onChange","disabled","onSelectDate","newDate","defaultSelectedKey","item","onClick","useGetTodoState","useSelector","state","dotProp","get","ButtonContainer","LoadingSection","ChangeConfirmation","history","useHistory","editing","dispatch","useDispatch","replace","new","type","CreationSection","payload","nanoid","ListSection","todos","setForEditConfirm","map","TodoListing","push","themeingConfig","lightBgColor","darkBgColor","darkTextColor","lightInputBg","lightInputColor","darkInputBg","darkInputColor","darkButtonBg","darkButtonColor","darkButtonBorder","darkButtonDisabledBg","darkButtonDisabledColor","darkToggleColorStateColor","darkSectionBg","defaultState","todosReducer","action","console","log","idSelected","undefined","idxOfItem","findIndex","partA","slice","partB","mode","applicationReducer","rootReducer","combineReducers","todoState","appState","application","store","createStore","FullPageOverlay","ErrorMessageSection","SimpleErrorBoundary","hasError","error","errorInfo","this","_error","React","Component","AppElement","main","darkMode","ToggleContainer","App","isDarkMode","style","textAlign","Toggle","defaultChecked","onText","offText","component","TodoListingPage","path","exact","ChangeConfirmationPage","StoreProvidedAndErrorBoundedApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initializeIcons","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fef9e80.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst SectionTitle = styled.h3``;\n\nexport default SectionTitle;\n","import styled from 'styled-components';\n\nconst SectionContainer = styled.section`\n  text-align: left;\n  padding: 3em;\n`;\n\nconst SectionContainerUsable = ({ children }) => {\n  return (\n    <SectionContainer className='todo_app_section_container'>\n      {children}\n    </SectionContainer>\n  );\n};\n\nexport default SectionContainerUsable;\n","import styled from 'styled-components';\n\nconst PageContainer = styled.div``;\n\nexport default PageContainer;\n","const TODO = 'ToDo';\nconst ONGOING = 'Ongoing';\nconst STALLED = 'Stalled';\nconst DONE = 'Done';\n\nconst ADD_TODO = 'ADD_TODO';\nconst SET_EDITING = 'SET_EDITING';\nconst CONFIRM_EDIT = 'CONFIRM_EDIT';\nconst RESET_EDITING = 'RESET_EDITING';\n\nconst ROUTE_HOME = '/';\nconst ROUTE_CHANGE_CONFIRM = '/confirm-change';\n\nconst LIGHT = 'LIGHT';\nconst DARK = 'DARK';\nconst TOGGLE_MODE = 'MODE_TOGGLE';\n\nconst statuses = [TODO, ONGOING, STALLED, DONE];\n\nconst statusOptions = statuses.reduce(\n  (options, current) => [...options, { key: current, text: current }],\n  []\n);\n\nexport {\n  statuses,\n  statusOptions,\n  ADD_TODO,\n  SET_EDITING,\n  CONFIRM_EDIT,\n  RESET_EDITING,\n  ROUTE_HOME,\n  ROUTE_CHANGE_CONFIRM,\n  LIGHT,\n  DARK,\n  TOGGLE_MODE,\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  TextField,\n  DatePicker,\n  Dropdown,\n  PrimaryButton,\n} from '@fluentui/react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nimport { statuses, statusOptions } from '../constants';\n\nconst TodoFormContainer = styled.div`\n  display: flex;\n  width: 100%;\n\n  ${(props) =>\n    props.readOnly\n      ? `\n    & input, & .ms-Dropdown-title {\n      background-color: #fefefe;\n      color: #121212;\n      // border: 1px solid rgb(243, 242, 241);\n    }\n\n    & .ms-Dropdown-title, & .ms-Dropdown-title:hover {\n      border: 1px solid rgb(243, 242, 241);\n    }\n  `\n      : ''}\n`;\n\nconst TitleField = styled(TextField)`\n  flex: 1 0 10%;\n`;\n\nconst DescriptionField = styled(TextField)`\n  flex: 1 0 10%;\n`;\n\nconst DueDateField = styled(DatePicker)`\n  flex: 1 0 10%;\n`;\n\nconst StatusDropdown = styled(Dropdown)`\n  flex: 1 0 10%;\n`;\n\nconst FormButton = styled(PrimaryButton)`\n  flex: 1 0 7%;\n`;\n\nconst TodoForm = ({\n  id,\n  title,\n  description,\n  submitText,\n  dueDate,\n  status,\n  isNew,\n  readOnly,\n  onSubmission,\n}) => {\n  const isInitialMount = useRef(true);\n\n  const [titleR, setTitle] = useState(title);\n  const [descriptionR, setDescription] = useState(description);\n  const [dueDateR, setDueDate] = useState(dueDate);\n  const [statusR, setStatus] = useState(status);\n  const [isValid, setIsValid] = useState(false);\n\n  const useSetter = (setter) => (e) => {\n    setter(e.target.value);\n  };\n\n  const onSelectDate = (newDate) => {\n    setDueDate(newDate);\n  };\n\n  const payloadData = {\n    id: id,\n    title: titleR,\n    description: descriptionR,\n    dueDate: dueDateR,\n    status: statusR,\n  };\n\n  useEffect(() => {\n    if (readOnly) return;\n\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n      return;\n    }\n\n    let emptyExists = [titleR, descriptionR].some(\n      (current) => !current || current.length === 0\n    );\n    emptyExists = emptyExists || !dueDateR;\n    emptyExists = emptyExists || !statusR;\n    if (emptyExists) {\n      setIsValid(false);\n    } else {\n      setIsValid(true);\n    }\n\n    return () => {};\n  }, [titleR, descriptionR, dueDateR, statusR, readOnly]);\n\n  return (\n    <TodoFormContainer className='todo_app_todo_form' readOnly={readOnly}>\n      <TitleField\n        placeholder='Title'\n        value={titleR}\n        onChange={useSetter(setTitle)}\n        readOnly={readOnly}\n        disabled={readOnly}\n      />\n      <DescriptionField\n        placeholder='Description'\n        value={descriptionR}\n        onChange={useSetter(setDescription)}\n        readOnly={readOnly}\n        disabled={readOnly}\n      />\n      <DueDateField\n        placeholder='Due Date'\n        value={dueDateR}\n        onSelectDate={onSelectDate}\n        readOnly={readOnly}\n        disabled={readOnly}\n      />\n      <StatusDropdown\n        placeholder='Status'\n        defaultSelectedKey={status}\n        options={statusOptions}\n        onChange={(e, item) => {\n          setStatus(item.key);\n        }}\n        disabled={readOnly}\n      />\n      <FormButton\n        text={submitText || (isNew ? 'Create' : 'Save')}\n        disabled={!readOnly && !isValid}\n        onClick={() => {\n          onSubmission(payloadData);\n        }}\n      />\n    </TodoFormContainer>\n  );\n};\n\nconst stringType = PropTypes.string;\n\nTodoForm.propTypes = {\n  title: stringType,\n  description: stringType,\n  submitText: stringType,\n  dueDate: PropTypes.instanceOf(Date),\n  status: PropTypes.oneOf(statuses),\n  isNew: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  onSubmission: PropTypes.func,\n};\n\nexport default TodoForm;\n","import { useSelector } from 'react-redux';\nimport dotProp from 'dot-prop';\nimport { DARK } from './constants';\n\nfunction useIsDarkMode() {\n  const isDarkMode = useSelector(\n    (state) => dotProp.get(state, 'appState.mode') === DARK\n  );\n  return isDarkMode;\n}\n\nfunction useGetTodoState() {\n  const todoState = useSelector((state) => dotProp.get(state, 'todoState'));\n  return todoState;\n}\n\nexport { useIsDarkMode, useGetTodoState };\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { PrimaryButton } from '@fluentui/react';\nimport styled from 'styled-components';\n\nimport PageContainer from '../components/PageContainer';\nimport SectionContainer from '../components/SectionContainer';\nimport SectionTitle from '../components/SectionTitle';\nimport TodoForm from '../components/TodoForm';\n\nimport { useGetTodoState } from '../hooks';\nimport { CONFIRM_EDIT, RESET_EDITING, ROUTE_HOME } from '../constants';\n\nconst ButtonContainer = styled.section`\n  margin-top: 2em;\n  display: block;\n`;\n\nconst LoadingSection = styled.section`\n  font-size: 2em;\n  width: 100%;\n`;\n\nfunction ChangeConfirmation() {\n  const history = useHistory();\n  const { editing } = useGetTodoState();\n  const dispatch = useDispatch();\n\n  const confirmEdit = () => {\n    dispatch({ type: CONFIRM_EDIT });\n  };\n\n  const resetEditing = () => {\n    dispatch({ type: RESET_EDITING });\n  };\n\n  useEffect(() => {\n    if (editing === null) {\n      history.replace(ROUTE_HOME);\n    }\n\n    return () => {};\n  }, [editing, history]);\n\n  const signalEditingEnd = () => {\n    resetEditing();\n  };\n\n  if (!editing) {\n    return <LoadingSection>Loading...</LoadingSection>;\n  }\n\n  return (\n    <PageContainer>\n      <SectionContainer>\n        <SectionTitle>\n          Confirm {editing.new ? 'New Todo' : 'Edit of Todo'}\n        </SectionTitle>\n\n        <TodoForm {...editing} readOnly onSubmission={confirmEdit} />\n\n        <ButtonContainer>\n          <PrimaryButton\n            disabled={!editing}\n            text='Return'\n            onClick={signalEditingEnd}\n          />\n        </ButtonContainer>\n      </SectionContainer>\n    </PageContainer>\n  );\n}\n\nexport default ChangeConfirmation;\n","import { nanoid } from 'nanoid';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport PageContainer from '../components/PageContainer';\nimport SectionContainer from '../components/SectionContainer';\nimport SectionTitle from '../components/SectionTitle';\nimport TodoForm from '../components/TodoForm';\nimport { ROUTE_CHANGE_CONFIRM, SET_EDITING } from '../constants';\nimport { useGetTodoState } from '../hooks';\n\nconst CreationSection = () => {\n  const dispatch = useDispatch();\n  const addTodoUsingData = (payload) => {\n    dispatch({\n      type: SET_EDITING,\n      payload: { ...payload, id: nanoid(), new: true },\n    });\n  };\n\n  return (\n    <SectionContainer>\n      <SectionTitle>Create Todo</SectionTitle>\n      <TodoForm isNew onSubmission={addTodoUsingData} />\n    </SectionContainer>\n  );\n};\n\nconst ListSection = () => {\n  const { todos } = useGetTodoState();\n  const dispatch = useDispatch();\n\n  const setForEditConfirm = (payload) => {\n    dispatch({ type: SET_EDITING, payload });\n  };\n\n  return (\n    <SectionContainer>\n      <SectionTitle>Todos Created</SectionTitle>\n      {todos.map((current) => (\n        <TodoForm\n          key={current.id}\n          {...current}\n          onSubmission={setForEditConfirm}\n        />\n      ))}\n    </SectionContainer>\n  );\n};\n\nfunction TodoListing() {\n  const { editing } = useGetTodoState();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (editing !== null) {\n      history.push(ROUTE_CHANGE_CONFIRM);\n    }\n    return () => {};\n  }, [editing, history]);\n\n  return (\n    <PageContainer>\n      <CreationSection />\n      <ListSection />\n    </PageContainer>\n  );\n}\n\nexport default TodoListing;\n","const themeingConfig = {\n  lightBgColor: 'lightblue',\n  darkBgColor: '#04041b',\n  darkTextColor: '#efefef',\n\n  lightInputBg: '#fefefe',\n  lightInputColor: '#121212',\n\n  darkInputBg: '#04041b',\n  darkInputColor: '#cdcdcd',\n\n  darkButtonBg: '#1c1e5a',\n  darkButtonColor: '#efefef',\n  darkButtonBorder: '1px solid grey',\n  darkButtonDisabledBg: '#0a0b1e',\n  darkButtonDisabledColor: '#454545',\n  darkToggleColorStateColor: '#cdcdcd',\n\n  darkSectionBg: '#121212',\n};\n\nexport default themeingConfig;\n","import dotProp from 'dot-prop';\n\nimport {\n  ADD_TODO,\n  SET_EDITING,\n  CONFIRM_EDIT,\n  RESET_EDITING,\n} from '../constants';\n\n// import { MockTodos as createMockTodos } from '../mock_data/todos';\n\nconst defaultState = {\n  todos: [],\n  // todos: createMockTodos(),\n  editing: null,\n};\n\nfunction todosReducer(state = defaultState, action) {\n  let todos;\n  switch (action.type) {\n    case ADD_TODO:\n      todos = [...state.todos, action.payload];\n      return { ...state, todos };\n    case SET_EDITING:\n      console.log({ 'action.payload': action.payload });\n      return { ...state, editing: action.payload };\n    case CONFIRM_EDIT:\n      const idSelected = dotProp.get(state, 'editing.id');\n      const isNew = dotProp.get(state, 'editing.new');\n      if (isNew) {\n        todos = [...state.todos, { ...state.editing, new: undefined }];\n      } else {\n        const idxOfItem = state.todos.findIndex(({ id }) => id === idSelected);\n        const partA = state.todos.slice(0, idxOfItem);\n        const partB = state.todos.slice(idxOfItem + 1);\n        todos = [...partA, state.editing, ...partB];\n      }\n      return { ...state, editing: null, todos };\n    case RESET_EDITING:\n      return { ...state, editing: null };\n    default:\n      return state;\n  }\n}\n\nexport default todosReducer;\n","import { LIGHT, DARK, TOGGLE_MODE } from '../constants';\n\nconst defaultState = {\n  mode: LIGHT,\n};\n\nfunction applicationReducer(state = defaultState, action) {\n  switch (action.type) {\n    case TOGGLE_MODE:\n      return { ...state, mode: state.mode === LIGHT ? DARK : LIGHT };\n    default:\n      return state;\n  }\n}\n\nexport default applicationReducer;\n","import { combineReducers } from 'redux';\n\nimport todos from './todos';\nimport application from './application';\n\nconst rootReducer = combineReducers({\n  todoState: todos,\n  appState: application,\n});\n\nexport default rootReducer;\n","import { createStore } from 'redux';\n\nimport rootReducer from './reducers/root';\n\nconst store = createStore(rootReducer);\n\nexport { store };\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst FullPageOverlay = styled.section`\n  background-color: #f4a073;\n  min-height: 100vh;\n  display: grid;\n  justify-content: center;\n  align-content: center;\n  padding: 3em;\n\n  @media (max-width: 705px) {\n    padding: 0;\n  }\n`;\n\nconst ErrorMessageSection = styled.section`\n  padding: 3em 4em;\n  background-color: #cd481a;\n  font-size: 2em;\n  color: #efefef;\n  min-height: 80vh;\n  word-wrap: break-word;\n  @media (max-width: 705px) {\n    padding: 1em;\n    font-size: 1em;\n    min-height: none;\n  }\n`;\n\nclass SimpleErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(_error) {\n    return { hasError: true };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.log({ error });\n    console.log({ errorInfo });\n  }\n  render() {\n    if (this.state.hasError) {\n      return (\n        <FullPageOverlay>\n          <ErrorMessageSection>\n            Oh no, an error has occured. Check the console for browser details.\n          </ErrorMessageSection>\n        </FullPageOverlay>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default SimpleErrorBoundary;\n","import { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Toggle } from '@fluentui/react';\nimport styled from 'styled-components';\nimport { Provider, useDispatch } from 'react-redux';\n\nimport SectionTitle from './components/SectionTitle';\nimport SectionContainer from './components/SectionContainer';\nimport ChangeConfirmationPage from './pages/ChangeConfirmation';\nimport TodoListingPage from './pages/TodoListing';\n\nimport { useIsDarkMode } from './hooks';\nimport themeingConfig from './config/themeing';\n\nimport { store } from './store';\n\nimport { ROUTE_CHANGE_CONFIRM, ROUTE_HOME, TOGGLE_MODE } from './constants';\nimport SimpleErrorBoundary from './components/SimpleErrorBoundary';\n\nconst AppElement = styled.main`\n  display: grid;\n  justify-content: center;\n  align-content: center;\n  background-color: ${themeingConfig.lightBgColor};\n  min-height: 100vh;\n  padding: 5em 0;\n\n  & .todo_app_section_container {\n    background-color: #fefefe;\n  }\n\n  & input,\n  & input::placeholder,\n  & .ms-Dropdown-title {\n    background-color: ${themeingConfig.lightInputBg};\n    color: ${themeingConfig.lightInputColor};\n  }\n  ${(props) =>\n    props.darkMode\n      ? `\n    background-color: ${themeingConfig.darkBgColor};\n    color: ${themeingConfig.darkTextColor};\n\n    & input, & input::placeholder, & .ms-Dropdown-title {\n      background-color: ${themeingConfig.darkInputBg};\n      color: ${themeingConfig.darkInputColor};\n    }\n\n    & .ms-Button {\n      background-color: ${themeingConfig.darkButtonBg};\n      color: ${themeingConfig.darkButtonColor};\n      border: ${themeingConfig.darkButtonBorder};\n    }\n\n    & .ms-Button:disabled {\n      background-color: ${themeingConfig.darkButtonDisabledBg};\n      color: ${themeingConfig.darkButtonDisabledColor};\n    }\n\n    & .todo_app_section_container {\n      background-color: ${themeingConfig.darkSectionBg};\n    }\n\n    & .ms-Toggle-stateText {\n      color: ${themeingConfig.darkToggleColorStateColor};\n    }\n  `\n      : ''}\n`;\n\nconst ToggleContainer = styled.section`\n  display: flex;\n  justify-content: flex-end;\n  padding: 0;\n  margin: 0;\n`;\n\nfunction App() {\n  // const mode = useSelector((state) => dotProp.get(state, 'appState.mode'));\n  const isDarkMode = useIsDarkMode();\n  const dispatch = useDispatch();\n\n  const toggleMode = () => {\n    dispatch({ type: TOGGLE_MODE });\n  };\n\n  return (\n    <AppElement darkMode={isDarkMode}>\n      <Router>\n        <SectionContainer>\n          <SectionTitle style={{ textAlign: 'right' }}>Mode</SectionTitle>\n          <ToggleContainer>\n            <Toggle\n              // label='Mode'\n\n              defaultChecked={false}\n              onText='Dark'\n              offText='Light'\n              onChange={toggleMode}\n            />\n          </ToggleContainer>\n        </SectionContainer>\n        <Switch>\n          <Route component={TodoListingPage} path={ROUTE_HOME} exact />\n          <Route\n            component={ChangeConfirmationPage}\n            path={ROUTE_CHANGE_CONFIRM}\n            exact\n          />\n        </Switch>\n      </Router>\n    </AppElement>\n  );\n}\n\nconst StoreProvidedAndErrorBoundedApp = () => (\n  <SimpleErrorBoundary>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </SimpleErrorBoundary>\n);\n\nexport default StoreProvidedAndErrorBoundedApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\ninitializeIcons();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}